@model EquilibriumCore.Models.FeuillePersonnage
@inject EquilibriumCore.Service.IToolTipService ToolTips
@using System.Linq.Expressions;
@{
    ViewBag.Title = "Details";
}
    <body>
        <form asp-action="Edit">

            <input type="hidden" id="ID" name="ID" value="@Model.ID" />
            <div>

                @if (User.Identity.Name == Model.Creator && ViewBag.hideButton == null)
                {
                    <div id="NEdition" style="display:  block "> <a href="#" onclick="HideShowEdition('NEdition');HideShowEdition('Edition')" class="btn btn-info" style="float:right ; position:fixed ; right:50px ">Edit</a> </div>

                    <div class="form-group">
                        <div id="Edition" style="display:  none">
                            <div class="form-group">
                                <div style="float: right ; position:fixed ; right:50px"> <input type="submit" value="Save" class="btn btn-success" /> </div>
                            </div>
                        </div>

                    </div>
                }
                <div id="NEdition" style="display:  block"><h2>  @Html.DisplayFor(model => model.Name)</h2></div><div class="form-group"> <div id="Edition" style="display:  none ">@Html.EditorFor(model => model.Name)</div></div>
                <hr />

                @if (Model.showHidable)
                {<div class="tooltip" style=" opacity: 0.5"> ID <span class="tooltiptext"> @Model.ID </span></div>
            }

                <table width="100%">
                    <tr>
                        <td>



                            <dl class="dl-horizontal" align="left">
                                <dt>
                                    @Html.DisplayNameFor(model => model.Race)
                                </dt>

                                <dd>
                                    <div id="NEdition" style="display:  block">  @Html.DisplayFor(model => model.Race)</div><div class="form-group"> <div id="Edition" style="display:  none ">@Html.EditorFor(model => model.Race)</div></div>
                                </dd>

                                <dt>
                                    @Html.DisplayNameFor(model => model.Level)
                                </dt>

                                <dd>
                                    <div id="NEdition" style="display:  block">  @Html.DisplayFor(model => model.Level) </div><div class="form-group"> <div id="Edition" style="display:  none ">@Html.EditorFor(model => model.Level)</div></div>
                                </dd>

                                <dt>
                                    HP/Level
                                </dt>

                                <dd>
                                    <div id="NEdition" style="display:  block">  @Html.DisplayFor(model => model.HPPerLevel)</div><div class="form-group"> <div id="Edition" style="display:  none ">@Html.EditorFor(model => model.HPPerLevel)</div></div>
                                </dd>
                                <dt>
                                    Max HP
                                </dt>

                                <dd>
                                    @Html.DisplayFor(model => model.HPMax)
                                </dd>

                            </dl>
                        </td>
                        <td class="dl-horizontal" align="left">
                            <dl>
                                <dt>
                                    Skill Point
                                </dt>

                                <dd>
                                    @Html.DisplayFor(model => model.SkillPoint)
                                </dd>
                                <dt>
                                    Class Point
                                </dt>

                                <dd>
                                    @Html.DisplayFor(model => model.ClassPoint)
                                </dd>
                                <dt>
                                    Spell Memory
                                </dt>

                                <dd>
                                    @Html.DisplayFor(model => model.Memory) (with  @Html.DisplayFor(model => model.MemoryBonus) bonus included )
                                </dd>
                                <dt>
                                    Technique Memory
                                </dt>

                                <dd>
                                    @Model.GetTechMemory() (no bonus included )
                                </dd>
                                <dt>
                                    Initiative
                                </dt>

                                <dd>
                                    <img src="~/images/d4.png" height="48" width="48" /> +
                                    @Html.DisplayFor(model => model.Initiative)
                                </dd>
                            </dl>
                        </td>
                    </tr>
                </table>

            </div>
            <div>
                <h3>Focus</h3>


                <table align="center" height="150">

                    <tr style="text-align:center">
                        <td>Brutality</td>
                    </tr>
                    <tr>
                        <td style="background-image:url('../../images/diamond.png')!important ; -webkit-print-color-adjust: exact; background-size:contain!important; background-repeat:no-repeat!important; background-position:center!important; width : auto!important ; height : auto!important ; text-align:center">
                            <h3> @Html.DisplayFor(model => model.Brutality)</h3>

                        </td>
                    </tr>
                </table>


                <table align="center" width="550" height="150">

                    <tr style="text-align:center">
                        <td width="50%">Vitality</td>
                        <td>Swiftness</td>
                    </tr>
                    <tr>
                        <td height="50" style="background-image:url('../../images/diamond.png')!important ; background-size:contain!important; background-repeat:no-repeat!important; background-position:center!important; width : auto!important ;  text-align:center">
                            <h3> @Html.DisplayFor(model => model.Vitality)</h3>

                        </td>
                        <td height="50" style="background-image:url('../../images/diamond.png')!important ; background-size:contain!important; background-repeat:no-repeat!important; background-position:center!important; width : auto!important ; text-align:center">
                            <h3>  @Html.DisplayFor(model => model.Swiftness)</h3>
                        </td>
                    </tr>
                </table>

                <table align="center" height="150" width="300">

                    <tr style="text-align:center">
                        <td width="50%">Malice</td>
                        <td>Spirit</td>
                    </tr>
                    <tr>
                        <td height="50" style="background-image:url('../../images/diamond.png')!important ; background-size:contain!important; background-repeat:no-repeat!important; background-position:center!important; width : auto!important ;  text-align:center ;  -webkit-print-color-adjust: exact; ">
                            <h3> @Html.DisplayFor(model => model.Malice)</h3>

                        </td>
                        <td height="50" style="background-image:url('../../images/diamond.png')!important; background-size:contain!important; background-repeat:no-repeat!important; background-position:center!important; width : auto!important ;  text-align:center ;  -webkit-print-color-adjust: exact; ">

                            <h3>  @Html.DisplayFor(model => model.Spirit)</h3>
                        </td>
                    </tr>
                </table>








            </div>
            <br />
            <br />
            <br />
            <div>
                <h4 @if (Model.getQteSkillPointUsed() != Model.SkillPoint) { @: style="background-color:red"
                    }>
                    Skills @Model.getQteSkillPointUsed() / @Model.SkillPoint
                </h4>
                @{ 
                    List<Tuple<string, string ,Expression<Func<FeuillePersonnage,int>>>> skillsWar = new List<Tuple<string, string,Expression<Func<FeuillePersonnage, int>>>>{
                        new Tuple<string, string ,Expression<Func<FeuillePersonnage,int>>>("One Hand (Swiftness)", ":"+ Model.GetWeaponBonusString(Model.OneHand),(FeuillePersonnage model) => model.OneHand ),
                         new Tuple<string, string ,Expression<Func<FeuillePersonnage,int>>>("Light One Hand (Malice)", ":"+ Model.GetWeaponBonusString(Model.LOneHand) ,(FeuillePersonnage model) => model.LOneHand ),
                           new Tuple<string, string ,Expression<Func<FeuillePersonnage,int>>>("Two Hand (Brutality)", ":"+ Model.GetWeaponBonusString(Model.TwoHand) ,(FeuillePersonnage model) => model.TwoHand ),
                           new Tuple<string, string ,Expression<Func<FeuillePersonnage,int>>>("Throwing (Malice)",  ":"+ Model.GetWeaponBonusString(Model.Throw) ,(FeuillePersonnage model) => model.Throw ),
                            new Tuple<string, string ,Expression<Func<FeuillePersonnage,int>>>("Archery (Brutality)",  ":"+ Model.GetWeaponBonusString(Model.Bow) ,(FeuillePersonnage model) => model.Bow ),
                             new Tuple<string, string ,Expression<Func<FeuillePersonnage,int>>>("Bodybuilding (Vitality)",":"+  @Model.GetStringHpBonus() ,(FeuillePersonnage model) => model.Body ),
                             new Tuple<string, string ,Expression<Func<FeuillePersonnage,int>>>("Parry (Vitality)", "" ,(FeuillePersonnage model) => model.Parry )

                    };

                    List<Tuple<string, string ,Expression<Func<FeuillePersonnage,int>>>> skillsMagic = new List<Tuple<string, string,Expression<Func<FeuillePersonnage, int>>>>
                    {
                           new Tuple<string, string ,Expression<Func<FeuillePersonnage,int>>>("Elemental Domains (Spirit)", ":"+ Model.GetMagicBonus(Model.Elem) ,(FeuillePersonnage model) => model.Elem ),
                            new Tuple<string, string ,Expression<Func<FeuillePersonnage,int>>>("Occult Domains (Malice)",  Model.GetMagicBonus(Model.Occult) ,(FeuillePersonnage model) => model.Occult ),
                            new Tuple<string, string ,Expression<Func<FeuillePersonnage,int>>>("Primordial Domains (Brutality)", ":"+ Model.GetMagicBonus(Model.Primordial) ,(FeuillePersonnage model) => model.Primordial ),
                            new Tuple<string, string ,Expression<Func<FeuillePersonnage,int>>>("Mage Weaponery (Swiftness)", ":"+ Model.GetWeaponBonusString(Model.MageWeap) ,(FeuillePersonnage model) => model.MageWeap ),
                            new Tuple<string, string ,Expression<Func<FeuillePersonnage,int>>>("Infusion (Spirit)", "",(FeuillePersonnage model) => model.Infusion ),
                            new Tuple<string, string ,Expression<Func<FeuillePersonnage,int>>>("Resistance (Vitality)","",(FeuillePersonnage model) => model.Resist ),
                            new Tuple<string, string ,Expression<Func<FeuillePersonnage,int>>>("Magic Identification (Swiftness)","" ,(FeuillePersonnage model) => model.MagicIdentif ),
                        };

                    List<Tuple<string, string ,Expression<Func<FeuillePersonnage,int>>>> skillsAdvent = new List<Tuple<string, string,Expression<Func<FeuillePersonnage, int>>>>
                    {                          
                            new Tuple<string, string ,Expression<Func<FeuillePersonnage,int>>>("Stealth (Malice))","",(FeuillePersonnage model) => model.Stealth ),
                            new Tuple<string, string ,Expression<Func<FeuillePersonnage,int>>>("Survival (Swiftness)","" ,(FeuillePersonnage model) => model.Survival ),
                            new Tuple<string, string ,Expression<Func<FeuillePersonnage,int>>>("Perception (Spirit)","",(FeuillePersonnage model) => model.Perception ),
                            new Tuple<string, string ,Expression<Func<FeuillePersonnage,int>>>("Speechcraft (Malice)","" ,(FeuillePersonnage model) => model.Speech ),
                            new Tuple<string, string ,Expression<Func<FeuillePersonnage,int>>>("History (Spirit)","",(FeuillePersonnage model) => model.History ),
                            new Tuple<string, string ,Expression<Func<FeuillePersonnage,int>>>("Medic (Spirit)","" ,(FeuillePersonnage model) => model.Medic ),
                            new Tuple<string, string ,Expression<Func<FeuillePersonnage,int>>>("Empath (Swiftness)","",(FeuillePersonnage model) => model.Empath ),
                            new Tuple<string, string ,Expression<Func<FeuillePersonnage,int>>>("Athletism (Brutality)","" ,(FeuillePersonnage model) => model.Athletism ),
                            new Tuple<string, string ,Expression<Func<FeuillePersonnage,int>>>("Dodge (Vitality)","",(FeuillePersonnage model) => model.Acrobatics ),
                            new Tuple<string, string ,Expression<Func<FeuillePersonnage,int>>>("Craft - Forge (Brutality)","" ,(FeuillePersonnage model) => model.CraftB ),
                            new Tuple<string, string ,Expression<Func<FeuillePersonnage,int>>>("Craft - Tinker (Swiftness)","",(FeuillePersonnage model) => model.CraftSW ),
                            new Tuple<string, string ,Expression<Func<FeuillePersonnage,int>>>("Craft - Medical (Spirit)","" ,(FeuillePersonnage model) => model.CraftS ),
                            new Tuple<string, string ,Expression<Func<FeuillePersonnage,int>>>("Craft - Poison (Malice)","",(FeuillePersonnage model) => model.CraftM ),
                            new Tuple<string, string ,Expression<Func<FeuillePersonnage,int>>>("Art (Swiftness)","" ,(FeuillePersonnage model) => model.Art ),
                            new Tuple<string, string ,Expression<Func<FeuillePersonnage,int>>>("Shadowcraft (Malice)","",(FeuillePersonnage model) => model.ShadowCraft),
                            new Tuple<string, string ,Expression<Func<FeuillePersonnage,int>>>("Disrupt (Brutality)","" ,(FeuillePersonnage model) => model.Disrupt ),
                            new Tuple<string, string ,Expression<Func<FeuillePersonnage,int>>>("Teaching (Spirit)","",(FeuillePersonnage model) => model.Teaching ),
                            new Tuple<string, string ,Expression<Func<FeuillePersonnage,int>>>("Animal Handling (Spirit)","" ,(FeuillePersonnage model) => model.AnimalH ),
                        };

                }
            
               

                <table align="center" width="100%" style="page-break-before:always">
                    <tr>
                        <td>


                            <h4> War skills</h4>

                            <ul class="skillList">
                                @foreach (var item in skillsWar)
                                {
                                    <li class="flexRow">
                                        <h5> @item.Item1</h5>
                                        <span id="NEdition" style="display:  block ">1+@Html.DisplayFor(item.Item3) @item.Item2</span>
                                        <span id="Edition" style="display:  none ">@Html.EditorFor(item.Item3)</span>
                                    </li>
                                }

                            </ul>

                            <h4> Magic skills</h4>
                            <ul class="skillList">
                                @foreach (var item in skillsMagic)
                                {
                                    <li class="flexRow">
                                        <h5> @item.Item1</h5>
                                        <span id="NEdition" style="display:  block ">1+@Html.DisplayFor(item.Item3) @item.Item2</span>
                                        <span id="Edition" style="display:  none ">@Html.EditorFor(item.Item3)</span>
                                    </li>
                                }
</ul>
                        </td>
                        <td>
                            <h4> Adventuring  skills</h4>
                            <ul class="skillList">
                                @foreach (var item in skillsAdvent)
                                {
                                    <li class="flexRow">
                                        <h5> @item.Item1</h5>
                                        <span id="NEdition" style="display:  block ">1+@Html.DisplayFor(item.Item3) @item.Item2</span>
                                        <span id="Edition" style="display:  none ">@Html.EditorFor(item.Item3)</span>
                                    </li>
                                }
                            </ul>
                           
                        </td>
                    </tr>
                </table>
            </div>
            <a id="Attacks"></a>
            <h2> Attacks</h2>

            <div id="Edition" style="display:  none ">
                <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#addAttack">
                    Add New
                </button>
            </div>

            @foreach (Attaque a in Model.ListAttaques)
            {
                @a.name @:* @a.Type * : @a.Description <br />
            }

            <div style="page-break-before:always">
                <hr />
                <div id="Edition" style="display:  none ">
                    <a asp-action="Select" asp-controller="Skills" asp-all-route-data=' new Dictionary<string, string> { { "FP", Model.ID.ToString() } }  '>Add a new passive</a>
                </div>
                <h3 @if (Model.getQtePassivePointUsed() != Model.ClassPoint) { @: style="background-color:red"
                    }>
                    Passive     @Model.getQtePassivePointUsed() / @Model.ClassPoint
                </h3>
                <br />
                <input type="text" class="hidden" id="skills" name="skills" value="@Model.skills" />
                <div>
                    @foreach (Skills s in Model.ListSkills)
                    {

                        <h4> @s.Name </h4> @s.CurrentLevel @:/ @s.levelMax <br />
                        <div id="Edition" style="display:  none ">
                            <a class="btn btn-danger" asp-action="RemoveSkillsFP" asp-all-route-data=' new Dictionary<string, string> { { "SkillId", s.ID.ToString() }, { "id", Model.ID.ToString() } } '>-</a>
                            <a asp-action="AddSkillsFP" asp-all-route-data=' new Dictionary<string, string> { { "SkillId", s.ID.ToString() }, { "id", Model.ID.ToString() } };   ' class="btn btn-success">+</a>
                        </div>
                        @Html.Raw(ToolTips.InsertTooltip(s.currentEffect))

                    }
                </div>
            </div>
            <div>


                <div id="NEdition" style="display:  block">
                    <div style="white-space:pre">
                        @Html.Raw(ToolTips.InsertTooltip(Model.passive))
                    </div>
                </div><div class="form-group"> <div id="Edition" style="display:  none "><textarea id="passive" name="passive" class="passive" style="width:80%; height:100px"> @Model.passive </textarea></div></div>
                <a id="Stuff"></a>
                <h3>Stuff</h3><br />
                <div id="Edition" style="display:  none ">
                    <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#addItem">
                        Add New Item
                    </button>

                </div>
                <div>
                    <table>

                        @foreach (Tuple<Weapon, ObjetInventaire> wp in ViewBag.InventoryWeapons)
                        {
                            <tr>
                                <td>
                                    @wp.Item1.Name.ToString() : @String.Format("{0}D{1}+{2} .", wp.Item1.NumberOfDice, wp.Item1.ValueMax, wp.Item1.Bonus)
                                    <b>@wp.Item1.Special </b>
                                    <i> @wp.Item2.Detail . @wp.Item1.Description </i>
                                </td>
                                <td>
                                    <h4 id="Edition" style="display:  none "><a asp-action="DeleteInventory" asp-controller="FeuillePersonnages" asp-route-id="@wp.Item2.ID" asp-route-idUser="@Model.ID" class="btn btn-danger">x</a></h4>
                                </td>
                            </tr>
                        }
                        @foreach (Tuple<Armors, ObjetInventaire> wp in ViewBag.InventoryArmors)
                        {
                            <tr>
                                <td>
                                    @wp.Item1.Name.ToString() : @String.Format("Physical : {0} . Magical : {1} .", wp.Item1.ArmorPhysical, wp.Item1.ArmorMagical)
                                    <b>@wp.Item1.Special </b>
                                    <i> @wp.Item2.Detail . @wp.Item1.Special </i>
                                </td>
                                <td>
                                    <h4 id="Edition" style="display:  none "><a asp-action="DeleteInventory" asp-controller="FeuillePersonnages" asp-route-id="@wp.Item2.ID" asp-route-idUser="@Model.ID" class="btn btn-danger">x</a></h4>
                                </td>
                            </tr>
                        }
                    </table>
                    <div id="NEdition" style="display:  block">
                        @Html.Raw(ToolTips.InsertTooltip(Model.Stuff))
                    </div>
                    <div class="form-group"> <div id="Edition" style="display:  none "><textarea id="Stuff" name="Stuff" class="Stuff" style="width:80%; height:100px"> @Model.Stuff </textarea></div></div>

                </div>
                <a id="TS"></a>
                <h3>Technic and Spell</h3><br />
                <div>
                    <div>
                        <div id="NEdition" style="display:  block ;white-space:pre">
                            @Html.Raw(ToolTips.InsertTooltip(Model.comp))
                        </div>
                        <div class="form-group"> <div id="Edition" style="display:  none "><textarea id="comp" name="comp" class="comp" style="width:80%; height:100px"> @Model.comp </textarea></div></div>

                    </div>
                    <hr />

                    @foreach (Spell spell in Model.Spells)
                    {
                        <div style="page-break-inside:avoid">
                            <h4 onclick="HideShow('@spell.ID')"> @spell.name</h4>
                            <div id="@spell.ID" class="dl-horizontal" style="display:  none ;">

                                @if (Model.showHidable)
                                {
                                    <div class="tooltip" style="opacity:0.5">
                                        ID <span class="tooltiptext"> @spell.ID </span>
                                    </div>
                                    <b>  Range ( --> ) - Area (O)     </b>
                                    @spell.getRange() @:(--> ) - @spell.getArea() (O)
                                    <br />
                                    <b> Cost </b>
                                    @spell.getCostString()
                                    <br /><b> Effet </b>
                                    <div style="white-space:pre">
                                        @Html.Raw(ToolTips.InsertTooltip(@spell.getSpellDescription()))
                                    </div>
                                    @if (User.Identity.Name == Model.Creator)
                                    {<a asp-action="Delete" asp-controller="Spells" asp-route-id="@spell.ID"> Delete  @spell.name </a>}
                                }
                            </div>
                        </div>
                    }




                </div>
            </div>
            <div id="Edition" style="display:  none ">
                <div class="form-group">
                    Shared?
                    <div>

                        <input type="checkbox" class="form-control text-box single-line" id="Shared" name="Shared" value="true" checked="@Model.Shared" />


                    </div>
                    Monster?
                    <div>

                        <input type="checkbox" class="form-control text-box single-line" id="Monster" name="Monster" value="true" checked="@Model.Monster" />


                    </div>
                </div>

                <div class="form-group">
                    Game linked
                    <div>

                        <select asp-for="partie" id="partie" name="partie" type="text" value="@Model.partie" class="form-control">

                            @foreach (string partie in Model.partiePossible.Select(a => a.Name))
                            {
                                @if (partie == Model.partie)
                                {
                                    <option value="@partie" selected> @partie </option>
                                }
                                else
                                {
                                    <option value="@partie"> @partie </option>
                                }

                            }

                        </select>

                        @Html.ValidationMessageFor(model => model.partie, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div>
                <p>
                    @if (Model.showHidable)
                    {
                        <br />
                        <a asp-action="DetailPdf" asp-route-id="@Model.ID"> to pdf </a>

                        <br />
                        @if (User.Identity.Name == Model.Creator)
                        {
                            @Html.ActionLink("New Spell", "Create", "Spells", new { id = Model.ID })
                            @:<br />
                        }
                        @Html.ActionLink("Back to List", "Index")
                    }
                </p>
            </div>

        </form>


        <!------------------------------Modal Add attack--------------------------------------------------------->
        <div class="modal fade" id="addAttack" tabindex="-1" role="dialog" aria-labelledby="Ajout" aria-hidden="true">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="AjoutAttackLabel">Add Attack</h5>

                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <h4>Attaque</h4>
                        <hr />
                        <div class="row">
                            <div class="col-md-4">
                                <form asp-action="AttackCreate" method="post">
                                    <div class="form-group">
                                        <h3>Name</h3>
                                        <input id="name" name="name" />
                                    </div>
                                    <div class="form-group">
                                        <h3>Range</h3>
                                        <input id="Portée" name="Portée" />
                                    </div>
                                    <div class="form-group">
                                        <h3> Type</h3>
                                        <select id="Type" name="Type">
                                            <option value="Physical">Physical</option>
                                            <option value="Magical">Magical</option>
                                            <option value="Hybrid">Hybrid</option>
                                        </select>
                                    </div>
                                    <div class="form-group">
                                        <h3>Description</h3>
                                        <input id="Description" name="Description" />
                                    </div>
                                    <div class="form-group">
                                        <input id="User" name="User" hidden="hidden" value="@Model.ID" />
                                    </div>
                                    <div class="form-group">
                                        <input type="submit" value="Create" class="btn btn-default" />
                                    </div>
                                </form>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>

                    </div>
                </div>
            </div>
        </div>      
        <!------------------------------Modal Add Item--------------------------------------------------------->
        <div class="modal fade" id="addItem" tabindex="-1" role="dialog" aria-labelledby="AjoutItem" aria-hidden="true">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="AjoutItemLabel">Add Item</h5>

                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <h4>Chose One </h4>
                        <h5 class="btn btn-info" onclick="SwitchToItem(1)">Weapons</h5>  <h5 class="btn btn-info" onclick="SwitchToItem(2)">Armor</h5>
                        <hr />
                        <div class="row">
                            <div style="margin:5px">
                                <form asp-action="CreateInventoryObject" method="post">
                                    <select id="ItemSourceID" name="ItemSourceID" type="text" onchange="GetItemData()" class="form-control">
                                    </select>
                                    <div id="Property1"></div>
                                    <div id="Property2"></div>
                                    <div id="Property3"></div>
                                    <div class="form-group">
                                        <textarea id="Detail" name="Detail" class="Detail" style="width:300px; height:100px">  </textarea>
                                        <input id="CharacterID" name="CharacterID" hidden="hidden" value="@Model.ID" />
                                        <input id="TypeObjectIn" name="TypeObjectIn" hidden="hidden" value="1" />
                                    </div>
                                    <div class="form-group">
                                        <input type="submit" value="Create" class="btn btn-default" />
                                    </div>
                                </form>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>

                    </div>
                </div>
            </div>
        </div>
    </body>



<script type="text/javascript">

    var Weapons = @Html.Raw(ViewBag.Weapons) ;
     var Armors = @Html.Raw(ViewBag.Armors) ;

    document.onload = startEdit();
    function startEdit() {
        console.log("pass");
    @if (@ViewBag.edit) {
    @:console.log("True")
    @:HideShowEdition('NEdition');
    @:HideShowEdition('Edition');
    } else
    {
    @:console.log("False")
    }

    }
   
function HideShow(element) {
        // Declare variables
        //  console.log(element);
        var box;
        box = document.getElementById(element);



        // Loop through all list items, and hide those who don't match the search query


        if (box.style.display == "none") {
            box.style.display = "";
        }
        else {
            box.style.display = "none";
        }

    }
function HideShowEdition(element)
{
    // Declare variables
  //  console.log(element);
  var box;
    box = document.querySelectorAll("#" + element);

    box.forEach(element => invertVisible(element));

    // Loop through all list items, and hide those who don't match the search query

}
function invertVisible(item)
{
    if (item.style.display == "none")
    {
    item.style.display = "";
    }
    else
    {
    item.style.display = "none";
    }
}
 
    function LoadListItem(typeItem)
    {
        var list;
        if (typeItem == 1) {

            list = Weapons;
        } else {
            list = Armors;
        }


        var selec = document.getElementById('ItemSourceID');
        while (selec.options.length)
        {
                 selec.remove(0);
            }
        list.forEach((value) => {
            var c = document.createElement("option");
            c.text = value["Name"];
            c.value = value["ID"];
            selec.options.add(c, selec.options.length);
        }
        );
        selec.selectedIndex = 0;
        GetItemData();
    }

    function SwitchToItem(typeItem) {
          document.getElementById("TypeObjectIn").value = typeItem;
        LoadListItem(typeItem);
      
    }
    function GetItemData() {
        
        if (document.getElementById("TypeObjectIn").value == 1) {
            
           var e = document.getElementById("ItemSourceID");
        var Weapon = e.options[e.selectedIndex].value;
        document.getElementById("Property1").innerHTML = "Damage : " + Weapons[e.selectedIndex]["NumberOfDice"] + "D" + Weapons[e.selectedIndex]["ValueMax"] + "+ (" + Weapons[e.selectedIndex]["Bonus"] + ")";
        document.getElementById("Property2").innerHTML = "Special : " + Weapons[e.selectedIndex]["Special"];
            document.getElementById("Property3").innerHTML = "";
        } else {
          var e = document.getElementById("ItemSourceID");
        var armor = e.options[e.selectedIndex].value;
        document.getElementById("Property1").innerHTML = "Physical Armor : " + Armors[e.selectedIndex]["ArmorPhysical"] ;
            document.getElementById("Property2").innerHTML = "Magical Armor : " + Armors[e.selectedIndex]["ArmorMagical"];
  document.getElementById("Property3").innerHTML = "Special : " + Armors[e.selectedIndex]["Special"];
        }
    }
   
</script>
